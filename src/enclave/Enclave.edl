enclave {
    include "sgx_tcrypto.h"
    include "sgx_dh.h"
    include "sgx_tseal.h"
    include "MerkleTree.h"
    include "Node.h"
    include "ValidationStatus.h"
    include "CrustStatus.h"
	include "IASReport.h"

    from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;
    from "sgx_tsgxssl.edl" import *;

    trusted {
        // Srd ecalls for srd files
        public void ecall_srd_increase([in, string] const char* path);
        public size_t ecall_srd_decrease(long change);  
        public void ecall_srd_update_metadata([in, size=hashs_len] const char *hashs, size_t hashs_len);
        public void ecall_srd_set_change(long change);

        public void ecall_main_loop();
        public crust_status_t ecall_cmp_chain_account_id([in, size=len] const char *account_id, size_t len);
        public crust_status_t ecall_set_chain_account_id([in, size=len] const char *account_id, size_t len);
        public validation_status_t ecall_return_validation_status(void);

        public crust_status_t ecall_generate_work_report([out] size_t *report_len);
        public crust_status_t ecall_get_work_report([out, size=report_len] char *report, size_t report_len);
        public crust_status_t ecall_get_signed_work_report([in, string] const char *block_hash, size_t block_height, [out] sgx_ec256_signature_t *p_signature, [out, size=report_len] char* report, size_t report_len); 
        
        public crust_status_t ecall_sign_network_entry([in, size=data_size] const char *p_partial_data, uint32_t data_size, [out] sgx_ec256_signature_t *p_signature);
        public crust_status_t ecall_restore_metadata();
		public sgx_status_t ecall_get_report([out] sgx_report_t *report,[in] sgx_target_info_t *target_info);
        public crust_status_t ecall_store_quote([in, size=len] const char *quote, size_t len, [in, size=data_size] const uint8_t *p_data, uint32_t data_size, [in] sgx_ec256_signature_t *p_signature, [in, size=account_id_sz] const uint8_t *p_account_id, uint32_t account_id_sz);
		public sgx_status_t ecall_gen_sgx_measurement();
        public sgx_status_t ecall_gen_key_pair();
        public crust_status_t ecall_verify_iasreport([in, count=len] char ** IASReport, size_t len);

        public crust_status_t ecall_seal_file([in, size=tree_len] const char *p_tree, size_t tree_len, [in, size=path_len] const char *path, [out, size=path_len] char *p_new_path , size_t path_len);
        public crust_status_t ecall_unseal_file([in, count=files_num] char **files, size_t files_num, [in, string] const char *p_dir, [out, size=path_len] char *p_new_path, uint32_t path_len);
        public void ecall_confirm_file([in, string] const char *hash);
        public void ecall_delete_file([in, string] const char *hash);

        public crust_status_t ecall_get_signed_order_report();
        public void ecall_id_get_info();
        public void ecall_get_workload();
    };

    untrusted {
        void ocall_print_info([in, string] const char *str);
        void ocall_print_debug([in, string] const char *str);
        void ocall_log_info([in, string] const char *str);
        void ocall_log_warn([in, string] const char *str);
        void ocall_log_err([in, string] const char *str);
        void ocall_log_debug([in, string] const char *str);
        crust_status_t ocall_create_dir([in, string] const char *path);
        crust_status_t ocall_rename_dir([in, string] const char *old_path, [in, string] const char *new_path);
        crust_status_t ocall_save_file([in, string] const char *file_path, [in, size=len] const unsigned char *data, size_t len);
        crust_status_t ocall_delete_folder_or_file([in, string] const char *path);
        size_t ocall_get_folders_number_under_path([in, string] const char *path);
        crust_status_t ocall_get_file([in, string] const char *file_path, [out] unsigned char **p_file, [out] size_t *len);
        crust_status_t ocall_get_storage_file([in, string] const char *file_path, [out] unsigned char **p_file, [out] size_t *len);
        void ocall_store_sealed_merkletree([in, string] const char *org_root_hash, [in, size=tree_len] const char *tree_data, size_t tree_len);
        void ocall_get_sub_folders_and_files([in, string] const char *path, [out] char ***files, [out] size_t *files_num);
        crust_status_t ocall_replace_file([in, string] const char *old_path, [in, string] const char *new_path, [in, size=len] const uint8_t *data, size_t len);
        void ocall_usleep(int u);

        crust_status_t ocall_get_file_block_by_path([in, size=hash_len] char *root_hash, [in, size=hash_len] char *cur_hash, uint32_t hash_len, [in, count=path_count] uint32_t *path, uint32_t path_count);

        crust_status_t ocall_persist_add([in, string] const char *key, [in, size=value_len] const uint8_t *value, size_t value_len);
        crust_status_t ocall_persist_add_keys([in, string] const char *key, [in, size=keys_len] const char *keys, size_t keys_len);
        crust_status_t ocall_persist_del([in, string] const char *key);
        crust_status_t ocall_persist_del_keys([in, string] const char *key, [in, size=keys_len] const char *keys, size_t keys_len);
        crust_status_t ocall_persist_set([in, string] const char *key, [in, size=value_len] const uint8_t *value, size_t value_len);
        crust_status_t ocall_persist_get([in, string] const char *key, [out] uint8_t **value, [out] size_t *value_len);

        crust_status_t ocall_validate_init();
        crust_status_t ocall_validate_get_file([in, string] const char *root_hash, [in, string] const char *leaf_hash, [out] uint8_t **p_sealed_data, [out] size_t *sealed_data_size);
        void ocall_validate_close();

        void ocall_store_order_report([in, size=order_size] const char *p_order, size_t order_size);

        void ocall_srd_info_lock();
        void ocall_srd_info_unlock();

        void ocall_srd_change(long change)
            allow(ecall_srd_increase, ecall_srd_decrease, ecall_srd_set_change);

        void ocall_store_identity([in, string] const char *id);

        void ocall_store_enclave_id_info([in, string] const char *info);

        void ocall_store_workload([in, string] const char *wl);
    };
};
