enclave {
    include "sgx_tcrypto.h"
    include "sgx_dh.h"
    include "sgx_tseal.h"
    include "stdbool.h"
    include "MerkleTree.h"
    include "CrustStatus.h"
    include "IASReport.h"
    include "Parameter.h"

    from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;
    from "sgx_tsgxssl.edl" import *;

    trusted {
        // Srd ecalls for srd files
        public crust_status_t ecall_srd_increase([in, string] const char *uuid);
        public size_t ecall_srd_decrease(size_t change);  
        public void ecall_srd_remove_space([in, size=data_size] const char *data, size_t data_size);
        public crust_status_t ecall_change_srd_task(long change, [out] long *real_change);

        public void ecall_main_loop();
        public crust_status_t ecall_cmp_chain_account_id([in, size=len] const char *account_id, size_t len);

        public crust_status_t ecall_gen_and_upload_work_report([in, string] const char *block_hash, size_t block_height); 
        
        public void ecall_stop_all();
        public crust_status_t ecall_restore_metadata();
        public sgx_status_t ecall_get_quote_report([out] sgx_report_t *report,[in] sgx_target_info_t *target_info);
        public sgx_status_t ecall_gen_sgx_measurement();
        public sgx_status_t ecall_gen_key_pair([in, size=len] const char *account_id, size_t len);
        public crust_status_t ecall_verify_and_upload_identity([in, count=len] char ** IASReport, size_t len);

        public crust_status_t ecall_seal_file_start([in, string] const char *root);
        public crust_status_t ecall_seal_file([in, string] const char *root, [in, size=data_size] const uint8_t *data, size_t data_size, bool is_link, [in, out, size=path_size] char *path, size_t path_size);
        public crust_status_t ecall_seal_file_end([in, string] const char *root);
        public crust_status_t ecall_unseal_file([in, string] const char *path, [in, out, size=decrypted_data_size] uint8_t *p_decrypted_data, size_t decrypted_data_size, [out] size_t *p_decrypted_data_size);
        public crust_status_t ecall_delete_file([in, string] const char *hash);

        public void ecall_validate_file();
        public void ecall_validate_srd();

        public crust_status_t ecall_gen_upgrade_data(size_t block_height);
        public crust_status_t ecall_restore_from_upgrade([in, size=data_size] const uint8_t *data, size_t data_size);
        public crust_status_t ecall_enable_upgrade(size_t block_height);
        public void ecall_disable_upgrade();

        public void ecall_id_get_info();

        public crust_status_t ecall_safe_store2(ecall_store_type_t t, [in, size=partial_size] const uint8_t *data, size_t total_size, size_t partial_size, size_t offset, uint32_t buffer_key);
    };

    untrusted {
        void ocall_print_info([in, string] const char *str);
        void ocall_print_debug([in, string] const char *str);
        void ocall_log_info([in, string] const char *str);
        void ocall_log_warn([in, string] const char *str);
        void ocall_log_err([in, string] const char *str);
        void ocall_log_debug([in, string] const char *str);
        crust_status_t ocall_create_dir([in, string] const char *path, store_type_t type);
        crust_status_t ocall_rename_dir([in, string] const char *old_path, [in, string] const char *new_path, store_type_t type);
        crust_status_t ocall_save_file([in, string] const char *file_path, [in, size=data_size] const uint8_t *data, size_t data_size, store_type_t type);
        crust_status_t ocall_save_ipfs_block([in, string] const char *path, [in, size=data_size] const uint8_t *data, size_t data_size, [in, out, size=uuid_len] char *uuid, size_t uuid_len);
        crust_status_t ocall_delete_folder_or_file([in, string] const char *path, store_type_t type);
        crust_status_t ocall_delete_ipfs_file([in, string] const char *cid);
        crust_status_t ocall_get_file([in, string] const char *file_path, [out] uint8_t **p_file, [out] size_t *len, store_type_t type);
        void ocall_usleep(int u);
        crust_status_t ocall_chain_get_block_info([in, out, size=data_size] uint8_t *data, size_t data_size, [out] size_t *real_size);

        bool ocall_ipfs_online();
        crust_status_t ocall_ipfs_get_block([in, string] const char *cid, [out] uint8_t **p_data, [out] size_t *data_size);
        crust_status_t ocall_ipfs_cat([in, string] const char *cid, [out] uint8_t **p_data, [out] size_t *data_size);
        crust_status_t ocall_ipfs_add([in, size=len] uint8_t *p_data, size_t len, [out, size=cid_len] char *cid, size_t cid_len);
        crust_status_t ocall_ipfs_del([in, string] const char *cid);
        crust_status_t ocall_ipfs_del_all([in, string] const char *cid);

        crust_status_t ocall_persist_add([in, string] const char *key, [in, size=value_len] const uint8_t *value, size_t value_len);
        crust_status_t ocall_persist_del([in, string] const char *key);
        crust_status_t ocall_persist_set([in, string] const char *key, [in, size=value_len] const uint8_t *value, size_t value_len, size_t total_size, [in, out] uint8_t **total_buf, size_t offset);
        crust_status_t ocall_persist_get([in, string] const char *key, [out] uint8_t **value, [out] size_t *value_len);
        crust_status_t ocall_free_outer_buffer([in, out] uint8_t **value);
        crust_status_t ocall_srd_change(long change)
            allow(ecall_srd_increase, ecall_srd_decrease, ecall_change_srd_task);

        crust_status_t ocall_upload_workreport();
        crust_status_t ocall_upload_identity([in, string] const char *id)
            allow(ecall_id_get_info);
        crust_status_t ocall_entry_network()
            allow(ecall_get_quote_report, ecall_verify_and_upload_identity);

        crust_status_t ocall_get_block_hash(size_t report_height, [in, out, size=hash_len] char *report_hash, size_t hash_len);

        void ocall_store_enclave_id_info([in, string] const char *info);
        crust_status_t ocall_store_upgrade_data([in, size=data_size] const uint8_t *data, size_t data_size);
        crust_status_t ocall_store_file_info_all([in, size=data_size] const uint8_t *data, size_t data_size);
        void ocall_store_file_info([in, string] const char* cid, [in, string] const char *data, [in, string] const char *type);
        void ocall_set_srd_info([in, size=data_size] const uint8_t *data, size_t data_size);

        void ocall_recall_validate_file();
        void ocall_recall_validate_srd();

        void ocall_change_file_type([in, string] const char *cid, [in, string] const char *old_type, [in, string] const char *new_type);
        void ocall_delete_file_info([in, string] const char *cid, [in, string] const char *type);

        crust_status_t ocall_safe_store2(ocall_store_type_t t, [in, size=partial_size] const uint8_t *data, size_t total_size, size_t partial_size, size_t offset, uint32_t buffer_key);
    };
};
