#!/bin/bash
function _seal()
{
    local filesize=$((RANDOM % 17 + 1))m
    $GEN_RANDOM_DATA ${filesize} $datadir/$filesize
    if [ $? -ne 0 ]; then
        verbose ERROR "generate random data failed!"
        exit 1
    fi
    local cid_l=$(seal $datadir/$filesize)
    rm $datadir/$filesize
    if [ ${#cid_l} -ne 46 ]; then
        verbose ERROR "seal file failed!"
        exit 1
    fi
    echo $cid_l
}

function _validate()
{
    local i=10
    while [ $((i--)) -gt 0 ]; do
        validate_srd_real &>/dev/null
        validate_file_real &>/dev/null
    done
}

function validate_exit()
{
    rm -rf $tmpdir

    # Delete test files
    for cid in ${cid_arry[@]}; do
        delete_file $cid &>/dev/null
    done
}


########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
datadir=$instdir/data
testdir=$instdir/test_app
testconfigfile=$testdir/etc/Config.json
testfiledir=$testdir/files
tmpdir=$basedir/tmp
TMPFILE=$tmpdir/TMPFILE.$(date +%N)${RANDOM}
LOCKFILE=$tmpdir/LOCKFILE
syncfile=$tmpdir/syncfile

mkdir -p $tmpdir

trap 'validate_exit' EXIT

. $scriptdir/utils.sh


srd_num=$(get_config ".functionality|.validate|.srd_num")
deleted_srd=$(get_config ".functionality|.validate|.deleted_srd")
file_num=$(get_config ".functionality|.validate|.file_num")
deleted_file=$(get_config ".functionality|.validate|.deleted_file")

### Srd some space
srd_real $srd_num &>/dev/null
srd_path=$(cat $testconfigfile | jq '.srd_paths|.[]' | sed 's/"//g')
i=0
# Delete some srd
for sf in $(ls $srd_path); do
    if [ $((i++)) -ge $deleted_srd ]; then
        break
    fi
    rm -rf $srd_path/$sf
done

### Seal some file
cid_arry=()
cid_idx=0
i=0
while [ $((i++)) -lt $file_num ]; do
    _seal &>$TMPFILE
    cid_arry[$((cid_idx++))]=$(cat $TMPFILE)
done
# Delete some file
i=0
for cid in ${cid_arry[@]}; do
    if [ $((i++)) -ge $deleted_file ]; then
        break
    fi
    delete_file_block_random $cid
done

### Validate
_validate

### Check validate result
# Check srd
ret=0
punish_srd=$(ls $srd_path | wc -l)
((punish_srd=srd_num-punish_srd))
if [ $punish_srd -lt $deleted_srd ] || [ $punish_srd -gt $((deleted_srd*2)) ]; then
    verbose ERROR "srd validate for punishment failed!real punished num:$punish_srd" n
    ret=1
fi
# Check file
get_workload &>$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "get workload failed!" n
    ret=1
fi
real_vfile=$(cat $TMPFILE | jq '.files|.valid|.num')
expected_vfile=$((file_num-deleted_file))
if [ $real_vfile -ne $expected_vfile ]; then
    verbose ERROR "expected valid file num:$expected_vfile, real:$real_vfile" n
    ret=1
fi

exit $ret
