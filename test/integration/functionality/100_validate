#!/bin/bash
function _seal()
{
    local filesize=$((RANDOM % 8 + 1))m
    $GEN_RANDOM_DATA ${filesize} $datadir/$filesize
    if [ $? -ne 0 ]; then
        verbose ERROR "generate random data failed!"
        exit 1
    fi
    local cid_l=$(seal $datadir/$filesize)
    rm $datadir/$filesize
    if [ ${#cid_l} -ne 46 ]; then
        verbose ERROR "seal file failed!"
        exit 1
    fi
    echo $cid_l
}

function _validate()
{
    local i=20
    while [ $((i--)) -gt 0 ]; do
        validate_srd &>/dev/null
        validate_file &>/dev/null
    done
}

function validate_exit()
{
    rm -rf $tmpdir

    # Delete test files
    for cid in ${cid_arry[@]}; do
        delete_file $cid &>/dev/null
    done
}


########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
datadir=$instdir/data
tmpdir=$basedir/tmp
TMPFILE=$tmpdir/TMPFILE.$(date +%N)${RANDOM}
TMPFILE2=$tmpdir/TMPFILE2.$(date +%N)${RANDOM}
LOCKFILE=$tmpdir/LOCKFILE
syncfile=$tmpdir/syncfile

mkdir -p $tmpdir

trap 'validate_exit' EXIT

. $scriptdir/utils.sh


data_path=($(get_config_array ".data_path"))
srd_num=$(get_config ".functionality|.validate|.srd_num")
deleted_srd=$(get_config ".functionality|.validate|.deleted_srd")
file_num=$(get_config ".functionality|.validate|.file_num")
deleted_file=$(get_config ".functionality|.validate|.deleted_file")

### Srd some space
srd_real_sync $srd_num &>/dev/null
i=0
# Delete some srd
while [ $i -lt $deleted_srd ]; do
    for d_path in ${data_path[@]}; do
        del=false
        s_path=$d_path/sworker/srd
        for sf in $(ls $s_path); do
            filepath=$s_path/$sf
            rm -rf $filepath
            ((i++))
            del=true
            break
        done
        if $del; then break; fi
    done
done

### Seal some file
cid_arry=()
cid_idx=0
i=0
while [ $((i++)) -lt $file_num ]; do
    _seal &>$TMPFILE
    cid_arry[$((cid_idx++))]=$(cat $TMPFILE)
done
# Delete some file
deleted_cid_arry=()
i=0
while [ $i -lt $deleted_file ]; do
    for d_path in ${data_path[@]}; do
        cid=${cid_arry[$i]}
        f_path=$d_path/sworker/files/$cid
        if [ -e "$f_path" ]; then
            rm -r $f_path
            if [ $? -eq 0 ]; then
                deleted_cid_arry[$i]=$cid
            else
                verbose ERROR "Delete file:$f_path failed"
            fi
            ((i++))
        fi
    done
done

### Validate
_validate

### Check validate result
get_workload &>$TMPFILE2
if [ $? -ne 0 ]; then
    verbose ERROR "get workload failed!" n
    ret=1
fi
# Check srd
ret=0
punish_srd=$(cat $TMPFILE2 | jq '.srd|.srd_complete')
((punish_srd=srd_num-punish_srd))
if [ $punish_srd -ne $((deleted_srd)) ]; then
    verbose ERROR "srd validate for punishment failed!real punished num:$punish_srd" n
    ret=1
fi
# Check file
get_file_info_all &>$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "get workload failed!" n
    ret=1
fi
real_vfile=$(cat $TMPFILE2 | jq '.files|.valid|.num')
expected_vfile=$((file_num-deleted_file))
if [ $real_vfile -ne $expected_vfile ]; then
    verbose ERROR "expected valid file num:$expected_vfile, real:$real_vfile" n
    ret=1
fi
for cid in ${deleted_cid_arry[@]}; do
    if grep $cid $TMPFILE &>/dev/null; then
        verbose ERROR "delete file($cid) failed!" n
        ret=1
    fi
done

exit $ret
