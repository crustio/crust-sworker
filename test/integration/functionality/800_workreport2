#!/bin/bash
function _test_add_file()
{
    local num=$1
    test_add_file $num &>/dev/null
    if [ $? -ne 0 ]; then
        verbose ERROR "add file failed!!" n
        exit 1
    fi
}

function _test_delete_file()
{
    local num=$1
    test_delete_file $num &>/dev/null
    if [ $? -ne 0 ]; then
        verbose ERROR "delete file failed!" n
        exit 1
    fi
}

function _report_success()
{
    _report
}

function _report_failed()
{
    _report 1
}

function _report()
{
    local not_report=$1
    report_work &>$TMPFILE
    if [ $? -ne 0 ]; then
        verbose ERROR "report work failed!" n
        exit 1
    fi
    if [ x"$not_report" = x"" ]; then
        report_work_result &>/dev/null
        if [ $? -ne 0 ]; then
            verbose ERROR "report work result failed!" n
            exit 1
        fi
    fi
    files_size=$(cat $TMPFILE | jq '.files_size')
    files_size_added=0
    files_size_deleted=0
    for size in $(cat $TMPFILE | jq '.added_files|.[]|.size'); do
        ((files_size_added += $size))
    done
    for size in $(cat $TMPFILE | jq '.deleted_files|.[]|.size'); do
        ((files_size_deleted += $size))
    done
    echo "$files_size" "$files_size_added" "$files_size_deleted"
}

function _clean()
{
    local file_num=$1
    while [ $file_num -gt 0 ]; do
        _test_delete_file 1000
        _report_success &>/dev/null
        ((file_num-=1000))
    done

    return 0
}

function report_exit()
{
    rm -rf $tmpdir
}

########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
tmpdir=$basedir/tmp
TMPFILE=$tmpdir/TMPFILE.$(date +%N)${RANDOM}

mkdir -p $tmpdir

. $scriptdir/utils.sh

trap 'report_exit' EXIT


rnum=0
# Test round 1
_test_add_file 2000
pres=($(_report_success))
_test_delete_file 1000
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): add file. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 2
_test_add_file 1500
pres=($(_report_success))
_test_delete_file 500
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): add file. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 3
_test_add_file 1500
pres=($(_report_success))
_test_delete_file 500
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): delete file. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 4
_test_add_file 1500
pres=($(_report_success))
_test_delete_file 500
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): lost file. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 5
_test_add_file 1500
pres=($(_report_success))
_test_delete_file 1500
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): valid file. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 6
_test_add_file 1000
_test_delete_file 500
pres=($(_report_success))
_test_delete_file 500
_report_failed &>/dev/null
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): report failed,report again. expected:$expected, real:$real" n
if [ $expected -ne $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 7
_test_add_file 3000
pres=($(_report_success))
_report_success &>/dev/null
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): cheat: inform reporting while not!expected:$expected, real:$real" n
if [ $expected -eq $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000

# Test round 8
_test_add_file 1500
pres=($(_report_failed))
cres=($(_report_success))
expected=$((${pres[0]}+${cres[1]}-${cres[2]}))
real=${cres[0]}
verbose INFO "round$((++rnum)): cheat: inform not report while do!expected:$expected, real:$real" n
if [ $expected -eq $real ]; then
    verbose INFO "test failed!expected:$expected, real:$real" n
    exit 1
fi
_clean 3000
