#!/bin/bash
function report_exit()
{
    rm -rf $tmpdir
}

########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
datadir=$instdir/data
testdir=$instdir/test_app
testfiledir=$testdir/files
tmpdir=$basedir/tmp
TMPFILE=$tmpdir/TMPFILE.$(date +%N)${RANDOM}

mkdir -p $tmpdir

trap 'report_exit' EXIT

. $scriptdir/utils.sh


srd_num=$(get_config ".functionality|.srd_size")
srd_paths=$(get_config ".functionality|.srd_paths")
srd_max_per_turn=$(get_config ".functionality|.srd_max_per_turn")
file_arry=($(get_config ".functionality|.file_arry"))
added_fn_e=${#file_arry[@]}
tmp_num=0


# Ignore previous infact
report_work &>/dev/null
report_work_result &>/dev/null

# Get workload
get_workload &>$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "Get workload failed!" n
    exit 1
fi
workload=$(cat $TMPFILE)

# Delete previous srd
srd -$(echo $workload | jq '.srd|.space' | sed 's/"//g' 2>/dev/null) &>/dev/null

# Make srd volunm
srd_disk_change "$srd_paths" "add" &>/dev/null
while [ $tmp_num -lt $srd_num ]; do
    if [ $((srd_num - tmp_num)) -gt $srd_max_per_turn ]; then
        cur_turn=$srd_max_per_turn
    else
        cur_turn=$((srd_num - tmp_num))
    fi
    srd $cur_turn &>/dev/null
    if [ $? -ne 0 ]; then
        verbose ERROR "srd failed!" n
        exit 1
    fi
    ((tmp_num+=cur_turn))
done

# Delete previous file
clean_file
# Make file volunm
for file in ${file_arry[@]}; do
    seal_file $datadir/$file $testfiledir &>$TMPFILE
    if [ $? -ne 0 ]; then
        verbose ERROR "seal file failed!" n
        exit 1
    fi
    sealed_hash=$(cat $TMPFILE | jq '.path' | sed 's/"//g' | xargs -I {} basename {} 2>/dev/null)
    sealed_hash=${sealed_hash::64}
    confirm $sealed_hash &>/dev/null
    if [ $? -ne 0 ]; then
        verbose ERROR "confirm file failed!" n
        exit 1
    fi
done
validate_file &>/dev/null

# Report work report
report_work &>$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "get work report failed!" n
    exit 1
fi
res=$(cat $TMPFILE)
# Get report info
ret=0
added_fn=$(echo $res | jq '.added_files | .[] | .hash' | wc -l 2>/dev/null)
deleted_fn=$(echo $res | jq '.deleted_files | .[] | .hash' | wc -l 2>/dev/null)
reserved=$(echo $res | jq '.reserved' 2>/dev/null)
reserved_e=$((srd_num * 1024 * 1024 * 1024))
if [ x"$reserved" != x"$reserved_e" ]; then
    verbose ERROR "srd number is wrong!expect:${reserved_e}, real:${reserved}" n
    ret=1
fi
if [ x"$added_fn" != x"$added_fn_e" ]; then
    verbose ERROR "added file number is wrong!expect:$added_fn_e, real:$added_fn" n
    ret=1
fi

exit $ret
