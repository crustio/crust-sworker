#!/bin/bash
function kill_current()
{
    kill -9 $newsworkerpid &>/dev/null
    wait $newsworkerpid &>/dev/null
}

function srd_backend()
{
    # Get current available max per turn
    local srd_paths=$(get_config ".functionality|.srd_paths")
    local srd_max_per_turn=$(get_config ".functionality|.srd_max_per_turn")
    local real_max_per_turn=0
    local srd_paths_test=($(echo $srd_paths | sed -e 's/,/ /g' -e 's/\[\|\]//g' -e 's/\"//g'))
    local tmp=""
    for path in ${srd_paths_test[@]}; do
        if [ ! -d $path ]; then
            mkdir -p $path
        fi
        tmp=$(df -h $path | tail -n 1 | awk '{print $4}')
        tmp=${tmp%[a-zA-Z]*}
        ((real_max_per_turn += tmp))
    done
    if [ $srd_max_per_turn -gt $real_max_per_turn ]; then
        srd_max_per_turn=$real_max_per_turn
    fi

    # Srd task
    local srd_num=200000
    local tmp_num=0
    local cur_turn=0
    srd_disk_change "$srd_paths" "add" &>/dev/null
    while [ $tmp_num -lt $srd_num ]; do
        if [ $((srd_num - tmp_num)) -gt $srd_max_per_turn ]; then
            cur_turn=$srd_max_per_turn
        else
            cur_turn=$((srd_num - tmp_num))
        fi
        srd $cur_turn &>/dev/null
        ((tmp_num+=cur_turn))
    done
}

function success_exit()
{
    ### Delete srd
    srd -$(get_workload | jq '.srd|.space')
}

########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
testdir=$instdir/test_app
sworkerlog=$instdir/sworker.log

. $scriptdir/utils.sh

trap 'kill_current' INT
trap 'success_exit' EXIT


cd $testdir
srd_backend &
sleep 10
./bin/crust-sworker -c etc/Config.json --offline --debug --upgrade &>${sworkerlog}2 &
newsworkerpid=$!
oldsworkerpid=$(cat $sworkerpidfile)
sleep 20
while : ; do
    x1=$(ps --pid $newsworkerpid --no-headers | wc -l)
    x2=$(ps --pid $oldsworkerpid --no-headers | wc -l)
    [ $((x1+x2)) -ne 2 ] && { sleep 20; break; } 
    sleep 1
done
cd - &>/dev/null
if [ $x1 -eq 1 ]; then
    echo $newsworkerpid > $sworkerpidfile
    # Change current block height
    block_height=$(cat $reportheightfile &>/dev/null)
    [ x"$block_height" = x"" ] && { block_height=0; }
    ((block_height+=ERA_LENGTH))
    echo $block_height > $reportheightfile
else
    exit 1
fi
