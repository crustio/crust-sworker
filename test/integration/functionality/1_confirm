#!/bin/bash
function _store_meta()
{
    validate_file
    store_metadata
}

function seal_exit()
{
    rm -rf $tmpdir
}

########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
datadir=$instdir/data
testdir=$instdir/test_app
testfiledir=$testdir/files
tmpdir=$basedir/tmp
TMPFILE=$tmpdir/TMPFILE.$(date +%N)${RANDOM}

trap 'seal_exit' EXIT

mkdir -p $tmpdir

. $scriptdir/utils.sh


declare -A hash_2_use_m
data_arry=($(ls $datadir))
data_size=${#data_arry[@]}
acc=6

# Seal some file
while [ $acc -gt 0 ]; do
    # Randomly seal file
    index=$(($RANDOM % $data_size))
    seal_file $datadir/${data_arry[$index]} $testfiledir &>$TMPFILE
    if [ $? -ne 0 ]; then
        verbose ERROR "Seal file failed!" n
        exit 1
    fi
    ret_body=$(cat $TMPFILE)
    sealed_hash=$(echo $ret_body | jq '.path' | sed 's/"//g' | xargs -I {} basename {} 2>/dev/null)
    if [ x"$sealed_hash" != x"" ] && [ ${#sealed_hash} -eq 64 ]; then
        hash_2_use_m[$sealed_hash]=0
    else
        verbose ERROR "Seal file failed!" n
        exit 1
    fi
    ((acc--))
done

# Confirm file sequently
acc=3
for hash in ${!hash_2_use_m[@]}; do
    confirm $hash &>$TMPFILE
    if [ $? -ne 0 ]; then
        verbose ERROR "confirm file failed!" n
        exit 1
    fi
    hash_2_use_m[$hash]=1
    _store_meta &>/dev/null
    if ! check_hash "$hash" "valid"; then
        verbose ERROR "confirm file:$hash failed!" n
        exit 1
    fi
    ((acc--))
    if [ $acc -le 0 ]; then
        break
    fi
done

# Confirm file concurrently
confirm_arry=()
acc=0
for hash in ${!hash_2_use_m[@]}; do
    if [ ${hash_2_use_m[$hash]} -eq 0 ]; then
        confirm_arry[$acc]=$hash
        confirm $hash &>$TMPFILE &
    fi
done
sleep 3
_store_meta &>/dev/null
for hash in ${confirm_arry[@]}; do
    if ! check_hash "$hash" "valid"; then
        verbose ERROR "confirm file concurrently failed!" n
        exit 1
    fi
done
