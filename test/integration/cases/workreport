#!/bin/bash
########## MAIN BODY ##########
# basic variable
basedir=$(cd `dirname $0`;pwd)
instdir=$(cd $basedir/..;pwd)
scriptdir=$instdir/scripts
datadir=$instdir/data
testdir=$instdir/test_app
testfiledir=$testdir/files
TMPFILE=$instdir/TMPFILE
srd_size=10
data_file="128m"

. $scriptdir/utils.sh

########## Srd test ##########
# Delete previous srd
srd -10000
# Make srd volunm
srd $srd_size &>/dev/null
if [ $? -ne 0 ]; then
    verbose ERROR "srd failed!" n
    return 1
fi

########## File test ##########
# Delete previous file
for hash in $(get_workload 2>/dev/null | jq '.files | .valid | .detail | .[] | .sealed_hash' | sed 's/"//g'); do
    delete_file $hash &>/dev/null
done
# Make file volunm
seal_file $datadir/$data_file $testfiledir >$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "seal file failed!" n
    return 1
fi
sealed_hash=$(cat $TMPFILE | jq '.path' | sed 's/"//g' | xargs -I {} basename {} 2>/dev/null)
confirm $sealed_hash &>/dev/null
if [ $? -ne 0 ]; then
    verbose ERROR "confirm file failed!" n
    return 1
fi
validate_file &>/dev/null

# Report work report
report_work >$TMPFILE
if [ $? -ne 0 ]; then
    verbose ERROR "get work report failed!" n
    return 1
fi

# Get report info
files_num=$(cat $TMPFILE | jq '.files | .[] | .hash' | wc -l 2>/dev/null)
srd_num=$(cat $TMPFILE | jq '.reserved' 2>/dev/null)
if [ x"$srd_num" != x"$((srd_size * 1024 * 1024 * 1024))" ]; then
    verbose ERROR "srd number is wrong!" n
    return 1
fi
if [ x"$files_num" != x"1" ]; then
    verbose ERROR "file number is wrong!" n
    return 1
fi
